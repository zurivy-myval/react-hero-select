{"version":3,"sources":["components/superherocard.js","components/button.js","App.js","serviceWorker.js","index.js"],"names":["SuperHeroCard","details","name","image","console","log","className","src","url","alt","MarvelButton","useState","setSuperHeroID","superHero","setSuperHero","superHeroDetails","setSuperHeroDetails","href","onClick","e","preventDefault","RandomSuperheroName","counter","superHeroNames","superHeroSelect","Math","floor","random","fetch","then","res","json","result","error","setTimeout","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0OAeeA,EAbO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEbC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAEd,OADAC,QAAQC,IAAIJ,GAEX,yBAAKK,UAAU,2BACZ,4CAAkBJ,GAClB,yBAAKK,IAAMJ,EAAMK,IAAKC,IAAI,sBCgDnBC,MAtDf,WAAyB,IAAD,EACkBC,mBAAS,GAD3B,mBACAC,GADA,aAEcD,mBAAS,IAFvB,mBAEbE,EAFa,KAEFC,EAFE,OAG4BH,mBAAS,IAHrC,mBAGbI,EAHa,KAGKC,EAHL,KAuCpB,OACC,6BAEG,uBAAGC,KAAK,QAAQX,UAAU,gBAAgBY,QArC9C,SAAqBC,GACnBA,EAAEC,iBACFJ,EAAoB,IAItB,SAASK,EAAoBC,GACzB,IAAMC,EAAiB,CAAC,SAAU,aAAc,gBAAiB,WAAY,UAAW,UAAW,WAAY,kBAAmB,iBAAkB,eAAgB,cAAe,kBAEnL,GAAe,IAAZD,EAAc,CACb,IAAME,EAAkBC,KAAKC,MAAsB,IAAhBD,KAAKE,UAExCf,EAAeY,GACfV,EAAa,IAEbc,MAAM,kDAAkDJ,GACvDK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGhB,EAAoBgB,MAExB,SAACC,GACG7B,QAAQC,IAAI4B,WAKpBC,YAAW,WACPpB,EAAaS,EAAeE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAeY,OAAO,MAC9Ed,IAAsBC,KACxB,KA3BRD,CAAoB,KAkClB,cAEI,6BACHR,IAAcE,GAAoB,0BAAMT,UAAU,kBAAkBO,GACpEE,GACG,kBAAC,EAAD,CAAed,QAASc,M,MCnCrBqB,MAVf,WAEE,OACE,yBAAK9B,UAAU,OACb,kDACD,kBAAC,EAAD,QCEe+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACL7B,QAAQ6B,MAAMA,EAAMoB,c","file":"static/js/main.8beed0e0.chunk.js","sourcesContent":["import React from 'react';\n\nconst SuperHeroCard = ({ details }) => {\n    \n    const { name, image } = details;\n    console.log(details);\n    return (\n     <div className=\"SuperHeroCard-container\">\n        <h2>Yes, you are {name}</h2>\n        <img src={ image.url} alt=\"Superhero iamge\"/>\n     </div>\n    );\n  }\n\n\nexport default SuperHeroCard;","import React, { useState } from 'react';\nimport SuperHeroCard from './superherocard';\n\nfunction MarvelButton() {\n    const [superHeroID, setSuperHeroID] = useState(0);\n    const [superHero, setSuperHero] = useState('');\n    const [superHeroDetails, setSuperHeroDetails] = useState('');\n\n    function handleClick(e) {\n      e.preventDefault();\n      setSuperHeroDetails('');\n      RandomSuperheroName(0);\n    }\n\n    function RandomSuperheroName(counter){\n        const superHeroNames = ['Batman', 'Spider-man', 'Black Panther', 'Iron Man', 'Aquaman', 'Batgirl', 'Superman', 'Captain America', 'Captain Marvel', 'Wonder Woman', 'Black Widow', 'Doctor Strange'];\n        \n        if(counter === 7){\n            const superHeroSelect = Math.floor(Math.random() * 732);\n\n            setSuperHeroID(superHeroSelect);\n            setSuperHero('');\n\n            fetch(\"https://superheroapi.com/api/10222158177165164/\"+superHeroSelect)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setSuperHeroDetails(result);\n                },\n                (error) => {\n                    console.log(error);\n                }\n            )\n            \n        } else {\n            setTimeout(function(){\n                setSuperHero(superHeroNames[Math.floor(Math.random() * (superHeroNames.length+1))]);\n                RandomSuperheroName(++counter);\n            },150);\n        }\n    }\n  \n    return (\n     <div>\n         \n        <a href=\"#test\" className=\"superhero-btn\" onClick={handleClick}>\n            Yes, I am!\n        </a><br/>\n        {superHero && !superHeroDetails && <span className=\"superhero-name\">{superHero}</span>}\n        {superHeroDetails &&\n            <SuperHeroCard details={superHeroDetails}/>\n        }\n      </div>\n    );\n  }\n\n\nexport default MarvelButton;","import React from 'react';\nimport MarvelButton from './components/button';\nimport './App.css';\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <h1>Are You Superhero?</h1>\n     <MarvelButton/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}