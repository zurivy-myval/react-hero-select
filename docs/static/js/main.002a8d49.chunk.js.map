{"version":3,"sources":["components/superherocard.js","components/button.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","card","maxWidth","textAlign","marginLeft","marginRight","media","height","props","classes","details","name","image","biography","appearance","aliases","join","console","log","Card","className","CardActionArea","CardMedia","url","title","CardContent","Typography","gutterBottom","variant","component","gender","race","theme","button","margin","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","fontSize","color","borderColor","opacity","textDecoration","input","display","useState","superHero","setSuperHero","superHeroDetails","setSuperHeroDetails","Button","onClick","e","preventDefault","RandomSuperheroName","counter","superHeroNames","superHeroIds","superHeroSelect","Math","floor","random","length","fetch","then","res","json","result","error","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.002a8d49.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  card: {\n    maxWidth: 345,\n    textAlign: 'left',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  media: {\n    height: 320,\n  },\n};\n\nconst SuperHeroCard = (props) => {\n    \n    const { classes } = props;\n    const { name, image, biography, appearance } = props.details;\n\n    const aliases = biography.aliases.join(', ');\n\n    console.log(props.details);\n    return (\n      <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={image.url}\n          title=\"Hero Image\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n          <Typography component=\"p\">\n            {aliases && <span><strong>Aliases:</strong> {aliases}</span>} {aliases &&  <br/>}\n            {appearance.gender && <span><strong>Gender:</strong> {appearance.gender}</span>} {appearance.gender &&  <br/>}\n            {appearance.race && <span><strong>Race:</strong> {appearance.race}</span>} {appearance.race &&  <br/>}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n    );\n  }\n\n\n  export default withStyles(styles)(SuperHeroCard);","import React, { useState } from 'react';\nimport SuperHeroCard from './superherocard';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    button: {\n      margin: 30,\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n      paddingLeft: theme.spacing(8),\n      paddingRight: theme.spacing(8),\n      fontSize: 18,\n      color: '#F3D403',\n      borderColor: '#F3D403',\n      '&:hover': {\n        borderColor: '#F3D403',\n        opacity: 0.7,\n        textDecoration: 'underline'\n     },\n    },\n    input: {\n      display: 'none',\n    },\n  });\n\nfunction MarvelButton(props) {\n    const { classes } = props;\n\n    const [superHero, setSuperHero] = useState('');\n    const [superHeroDetails, setSuperHeroDetails] = useState('');\n\n    function handleClick(e) {\n      e.preventDefault();\n      setSuperHeroDetails('');\n      RandomSuperheroName(0);\n    }\n\n    function RandomSuperheroName(counter){\n        const superHeroNames = ['Batman', 'Spider-man', 'Black Panther', 'Iron Man', 'Aquaman', 'Batgirl', 'Superman', 'Captain America', 'Captain Marvel', 'Wonder Woman', 'Black Widow', 'Doctor Strange'];\n        \n        if(counter === 7){\n            const superHeroIds = [30, 34, 35, 38, 60, 63, 69, 75, 95, 105, 106, 145, 149, 156, 162, 176, 185, 196, 201, 213, 222, 227, 233, 234, 238, 251, 263, 273, 274, 275, 280, 298, 299, 303, 306, 313, 322, 328, 332, 346, 356, 361, 367, 374, 391, 413, 414, 416, 423, 479, 489, 490, 491, 522, 527, 530, 558, 567, 620, 627, 638, 659, 687, 697, 708, 714, 720, 729];\n            const superHeroSelect = superHeroIds[Math.floor(Math.random() * superHeroIds.length)];\n\n            fetch(\"https://cors-anywhere.herokuapp.com/https://superheroapi.com/api/10222158177165164/\"+superHeroSelect)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setSuperHeroDetails(result);\n                    setSuperHero('');\n                },\n                (error) => {\n                    console.log(error);\n                }\n            )\n            \n        } else {\n            setTimeout(function(){\n                setSuperHero(superHeroNames[Math.floor(Math.random() * (superHeroNames.length+1))]);\n                RandomSuperheroName(++counter);\n            },150);\n        }\n    }\n  \n    return (\n     <div>\n        <Button variant=\"outlined\" color=\"secondary\" className={classes.button} onClick={handleClick}>\n        Yes, I am!\n        </Button><br/>\n        {superHero && !superHeroDetails && <span className=\"superhero-name\">{superHero}</span>}\n        {superHeroDetails &&\n            <SuperHeroCard details={superHeroDetails}/>\n        }\n      </div>\n    );\n  }\n\n\n  export default withStyles(styles)(MarvelButton);","import React from 'react';\nimport MarvelButton from './components/button';\nimport './App.css';\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <h1>Are You Superhero?</h1>\n     <MarvelButton/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}